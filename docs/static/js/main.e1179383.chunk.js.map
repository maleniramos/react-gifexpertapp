{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValu","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGift","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAETC,mBAAS,IAFA,mBAErCC,EAFqC,KAEzBC,EAFyB,KAe5C,OAEI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACzBR,GAAe,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OACpCN,EAAa,MAOhB,SAEI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAaE,EAAEQ,OAAOF,a,+BCPhBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACmCC,UAAUH,GAD7C,+DAEDI,MAAMF,GAFL,cAEdG,EAFc,gBAGGA,EAAKC,OAHR,uBAGZC,EAHY,EAGZA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATtB,kBAafM,GAbe,4CAAH,sDCERO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAH0B,mBAC/BC,EAD+B,KACxBC,EADwB,KAkBtC,OAVAC,qBAAU,WACNxB,EAAQC,GAAUwB,MACjB,SAAAC,GAAOH,EAAS,CACbf,KAAMkB,EACNL,SAAQ,SAIb,CAACpB,IAEGqB,EDfqBK,CAAa1B,GAA7Ba,EAFyB,EAE9BN,KAAYa,EAFkB,EAElBA,QAEnB,OACI,qCACI,oBAAIJ,UAAU,yCAAd,SAAwDhB,IAD5D,OAEKoB,QAFL,IAEKA,IAAW,mBAAGJ,UAAU,wCAAb,sBACZ,qBAAKA,UAAU,YAAf,SAIQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEfxBgB,EAAe,WAAO,IAAD,EAEIzC,mBAAS,CAAC,cAFd,mBAEvB0C,EAFuB,KAEZ3C,EAFY,KAO9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ2C,EAAWnB,KAAI,SAACT,EAAU6B,GAAX,OACX,cAAC,EAAD,CAEA7B,SAAUA,GADLA,Y,MCb7B8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.e1179383.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValu] = useState('');\r\n    const handelInputChange = (e) => {\r\n        setInputValu(e.target.value);\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length>2){\r\n           setCategories( cats=>[inputValue,...cats]); \r\n           setInputValu('');\r\n        }\r\n\r\n        \r\n    }\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handelInputChange}\r\n            />\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategories:PropTypes.func.isRequired\r\n}"," export const getGift = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=0rbuLUz0Xp5xgVnrTXc0BwlfxGOnosVE`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n  \r\n  return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n   \r\n    return (\r\n        <div className=\"card animate__animated animate__faceIn\">\r\n            <img src={url} alt={title}  />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from '../components/GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const {data:images,loading}=useFetchGifs(category);\r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"card animate__animated animate__faceIn\">{category}</h3>\r\n            {loading ?? <p className=\"card animate__animated animate__flash\">Cargando</p>}\r\n            <div className=\"card-grid\">\r\n\r\n\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    )\r\n                    )   \r\n\r\n                    // images.map((img) =>\r\n                    //     <li key={img.id}>{img.title}</li>\r\n                    // )\r\n                    //Desestructurando img\r\n                    //     images.map(({id,title}) => \r\n                    //     <li key={id}>{title}</li>\r\n                    // )\r\n                }\r\n\r\n\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react'\r\nimport {getGift} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    //Si le pasamos el arreglo vacio solo se dispara una vez\r\n    //si la categorÃ­a cambia vuelve a ejecutar el efecto\r\n    useEffect(() => {\r\n        getGift(category).then\r\n        (imgs=>{setstate({\r\n            data: imgs,\r\n            loading:false\r\n\r\n        })\r\n    });\r\n    }, [category])\r\n\r\n    return state;\r\n\r\n}\r\n","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories,setCategories]= useState(['One Punch']);\r\n    // const handleAdd=()=>{\r\n    //     setCategories( [...categories,'Maleni']);\r\n    // };\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n         \r\n            <ol>\r\n                {\r\n                    categories.map((category, i) => \r\n                        <GifGrid  \r\n                        key={category}\r\n                        category={category}/>\r\n                    )\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {GifExpertApp} from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}